{
  "name": "vscode-fast-folder-structure-custom",
  "displayName": "Folder Templates [CUSTOM]",
  "description": "Create Templates for Folders and Files for easy reusability",
  "repository": {
    "type": "git",
    "url": "https://github.com/drzorm/vscode-folder-templates"
  },
  "keywords": [
    "Folder Creator",
    "File templates",
    "Folder Templates",
    "template",
    "Create Directories",
    "Productivity",
    "scaffold",
    "react",
    "angular",
    "vue"
  ],
  "icon": "images/extension-icon.png",
  "version": "3.12.3",
  "publisher": "drzorm",
  "engines": {
    "vscode": "^1.87.0"
  },
  "license": "MIT",
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onFileSystem:.ftsettings.json"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "FT.createFolderStructure",
        "title": "Create New Templated Folder"
      },
      {
        "command": "FT.openGlobalFolder",
        "title": "Open Global Folder Templates Directory"
      },
      {
        "command": "FT.chooseCustomGlobalTemplateFolder",
        "title": "Set Custom Global Folder Templates Directory"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "explorerResourceIsFolder",
          "command": "FT.createFolderStructure",
          "group": "2_workspace@500"
        }
      ]
    },
    "configuration": {
      "title": "Folder Templates",
      "properties": {
        "folderTemplates.templateNotation": {
          "type": "object",
          "scope": "window",
          "default": {
            "start": [
              "<",
              "["
            ],
            "end": [
              ">",
              "]"
            ]
          },
          "description": "Can be used to customize the template notation",
          "properties": {
            "start": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "default": "",
                "minLength": 1,
                "pattern": "^([^\\s].*[^\\s]*)$"
              },
              "default": [
                "<",
                "["
              ]
            },
            "end": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "default": "",
                "minLength": 1,
                "pattern": "^([^\\s].*[^\\s]*)$"
              },
              "default": [
                "<",
                "["
              ]
            }
          }
        },
        "folderTemplates.templateFolderPath": {
          "type": "string",
          "scope": "window",
          "default": ".fttemplates",
          "description": "Defines the path to the templates folder inside a project. Always has to be a relative path to the project root"
        },
        "folderTemplates.structures": {
          "type": "array",
          "scope": "window",
          "default": [],
          "description": "An array of objects where one object equals one natural file system folder structure.",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "default": "",
                "minLength": 1,
                "pattern": "^([^\\s].*[^\\s]*)$"
              },
              "customVariables": {
                "type": "array",
                "description": "Custom variables that will be replaced upon folder creation",
                "uniqueItems": true,
                "items": {
                  "type": "string",
                  "examples": [
                    "mainColor=>red",
                    "secondaryColor=>#cecece",
                    "tertiaryColor"
                  ],
                  "description": "A key-value pair (kvp) declaration delimited by '=>'. The left hand side is the name of the variable and the right hand side is the value to replace it",
                  "pattern": "^[\\w]+(=>([^\\s])+)?$"
                }
              },
              "omitParentDirectory": {
                "type": "boolean",
                "default": false,
                "description": "If set to true FT will create all files directly inside the current folder instead of creating a new folder and all the files inside of it"
              },
              "setExecutablePermission": {
                "type": "boolean",
                "default": false,
                "description": "If set to true FT will set automatically set executable permissions for files that are executable in the template as well."
              },
              "omitFTName": {
                "type": "boolean",
                "default": false,
                "description": "If set to true FT will not ask for a component name. (Can only be set to true if omitParentDirectory is true as well)"
              },
              "overwriteExistingFiles": {
                "type": "string",
                "default": "never",
                "enum": [
                  "never",
                  "always",
                  "prompt"
                ],
                "description": "If set to always all existing files will be overwritten. If set to prompt user will be asked which files shall be overwritten upon foldercreation. "
              },
              "openFilesWhenDone": {
                "type": "array",
                "description": "Files to open after the folder template is created",
                "uniqueItems": true,
                "items": {
                  "type": "string",
                  "default": "",
                  "minLength": 1,
                  "pattern": "^([^\\s].*[^\\s]*)$"
                }
              },
              "absolutePath": {
                "type": "boolean",
                "default": false,
                "description": "If set to true FT will always create all files relative to project root rather than relative to the folder you clicked. (Can only be set to true if omitParentDirectory is true as well)"
              },
              "structure": {
                "type": "array",
                "description": "Every object in this array represents a file or folder that will be created. To create an empty directory, set the `template` property to `EmptyDirectory`",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "fileName"
                  ],
                  "properties": {
                    "fileName": {
                      "type": "string",
                      "default": "",
                      "minLength": 1,
                      "pattern": "^([^\\s].*[^\\s]*)$",
                      "description": "Filenames can contain interpolated custom variables or can be assigned to subfolders by typing the full path. If a subfolder does not exist in the full path provided, it will be created at runtime",
                      "examples": [
                        "<FTName>.jsx",
                        "root/subfolderA/subfolderB/test.js",
                        "<CustomVar>"
                      ]
                    },
                    "isExecutable": {
                      "type": "boolean",
                      "default": false,
                      "description": "If set to true FT will set executable permissions for this file"
                    },
                    "template": {
                      "description": "",
                      "anyOf": [
                        {
                          "const": "EmptyDirectory"
                        },
                        {
                          "type": "string",
                          "default": "",
                          "minLength": 1,
                          "pattern": "^([^\\s].*[^\\s]*)$"
                        }
                      ],
                      "examples": [
                        "Typescript Functional Component",
                        "IndexFile",
                        "EmptyDirectory"
                      ]
                    }
                  }
                }
              }
            },
            "if": {
              "properties": {
                "omitParentDirectory": {
                  "const": true
                }
              }
            },
            "then": {
              "properties": {
                "omitFTName": {
                  "enum": [
                    true,
                    false
                  ]
                },
                "absolutePath": {
                  "enum": [
                    true,
                    false
                  ]
                }
              }
            },
            "else": {
              "properties": {
                "omitFTName": {
                  "enum": [
                    false
                  ]
                },
                "absolutePath": {
                  "enum": [
                    false
                  ]
                }
              }
            }
          }
        },
        "folderTemplates.fileTemplates": {
          "type": "object",
          "scope": "window",
          "default": {},
          "examples": [
            "\"Indexfile\": \"import <FTName> from './<FTName>'\n\nexport default <FTName>;"
          ],
          "additionalProperties": false,
          "patternProperties": {
            "^.+$": {
              "anyOf": [
                {
                  "type": "string",
                  "default": "",
                  "minLength": 1,
                  "pattern": "^([^\\s].*[^\\s]*)$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": ""
                  }
                }
              ]
            }
          }
        },
        "folderTemplates.globalTemplateDirectoryPath": {
          "type": "string",
          "scope": "window",
          "default": "",
          "examples": [
            "C:\\Users\\MyUser\\Desktop\\globalTemplates",
            "D:\\Users\\MyUser\\Desktop\\coding\\myGlobalTemplates",
            "%HOME%\\Desktop\\code\\GlobalTemplates"
          ],
          "description": "Defines the path to the global templates folder. Has to be an absolute path to the directory containing the templates"
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": ".ftsettings.json",
        "url": "./schemas/ftsettings.json"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "yarn rimraf-out && yarn esbuild-base --minify",
    "rimraf-out": "rimraf ./out",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "compile": "tsc -p ./",
    "lint": "eslint \"src/**/*.ts\"",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/chai": "^4.3.12",
    "@types/chai-fs": "^2.0.5",
    "@types/html-tags": "^3.0.1",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.11.24",
    "@types/pluralize": "^0.0.33",
    "@types/rimraf": "^4.0.5",
    "@types/sinon": "^17.0.3",
    "@types/sinon-chai": "^3.2.12",
    "@types/vscode": "^1.87.0",
    "@typescript-eslint/eslint-plugin": "^7.1.0",
    "@typescript-eslint/parser": "^7.1.0",
    "@vscode/test-cli": "^0.0.6",
    "@vscode/test-electron": "^2.3.9",
    "all-contributors-cli": "^6.26.1",
    "chai": "4",
    "chai-fs": "^2.0.0",
    "esbuild": "^0.20.1",
    "eslint": "^8.43.0",
    "glob": "^10.3.10",
    "mocha": "^10.3.0",
    "rimraf": "^5.0.5",
    "sinon": "^17.0.1",
    "sinon-chai": "^3.7.0",
    "typescript": "^5.3.3",
    "vscode-test": "^1.0.2"
  },
  "dependencies": {
    "change-case": "4",
    "date-fns": "^2",
    "date-fns-tz": "^2.0.0",
    "html-tags": "^3.3.1",
    "minimatch": "^9.0.3",
    "open": "^8.4.0",
    "pluralize": "^8.0.0",
    "x-match-expression": "^0.2.1"
  }
}
